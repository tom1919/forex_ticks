# -*- coding: utf-8 -*-
"""
Created on Tue Jan  5 09:58:58 2021

Download tick level Forex quotes from FXCM

@author: Tommy Lang
"""

#%% libs and cwd

import os
import time
import requests
import itertools
import pandas as pd
import dask.bag as db

#%% config

symbols = ['USDJPY', 'USDCAD']
years = [2018, 2019]
weeks = list(range(1,53))
config = list(itertools.product(*[symbols, years, weeks]))

#%% funcs

def read_gz(url):
    r = requests.get(url, stream=True)
    filename = '_'.join(url.split('/')[3:6])
    with open(filename , "wb") as f:
        r = requests.get(url)
        f.write(r.content)
    df = pd.read_csv(filename , encoding='utf_16_le')
    os.remove(filename)
    return df

def convert_dt(df):
    # pad missing zeros in microsecond field 
    df['DateTime'] = df.DateTime.str.pad(26, side='right', fillchar='0')
    
    # sample start and end to determine date format
    sample1 = df.DateTime[1]
    sample2 = df.DateTime.iloc[-1]
    
    dts = pd.DataFrame({'sample_dts':[sample1, sample2]})
    if sample1[2] == '/':
        dts['possible_month1'] = dts.sample_dts.str.slice(0,2)
        dts['possible_month2'] = dts.sample_dts.str.slice(3,5)
    elif sample1[4] == '/':
        dts['possible_month1'] = dts.sample_dts.str.slice(6,8)
        dts['possible_month2'] = dts.sample_dts.str.slice(8,10)
    
    # determine date format based on smallest distance between values
    dts = dts.T.iloc[1:].astype(int)
    dts.columns = ['beg', 'end']
    dts['format'] = ['%m/%d/%Y %H:%M:%S.%f', '%d/%m/%Y %H:%M:%S.%f']
    dts['delta'] = np.abs(dts.beg - dts.end)
    dt_format = dts.sort_values('delta').iloc[0].format
    
    df['dt_tm'] = pd.to_datetime(df.DateTime, format = dt_format)
    
    return df

def write_ftr(config_i):
    symbol, year, week = config_i
    url = f"https://tickdata.fxcorporate.com/{symbol}/{year}/{week}.csv.gz"
    df = read_gz(url)
    df = convert_dt(df)
    df.reset_index(drop = True).to_feather(f'./data/{symbol}_{year}_{week}.ftr')
    return None
    
#%% download csv.gz files and save as ftr files

t = time.perf_counter() 

b = db.from_sequence(config[0:60])
b = b.map(write_ftr)
_ = b.compute()

print(round(time.perf_counter()  - t,4))

